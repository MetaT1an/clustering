import matplotlib.pyplot as plt
import numpy as np


def show_time(file_name, t1, t2, alg1_name, alg2_name):
    """
    :param file_name: [string], name of data-file
    :param t1: [float], running time of the first algorithm
    :param t2: [float], running time of the first algorithm
    :param alg1_name: [string], name of the first algorithm
    :param alg2_name: [string], name of the second algorithm
    :return: None, to open a new gui window to show the result in a chart
    """
    plt.figure(figsize=(4.8, 4.0))

    fn, time1, time2 = [file_name], [t1], [t2]

    total_width, n = 0.6, 2
    single_width = total_width / n

    # start position in x axis
    x = np.arange(1)
    x = x - (total_width - single_width) / 2
    x2 = x + single_width

    # range of x amd y axis
    plt.xlim((-1, 1))
    plt.ylim((0, max(t1, t2) * 1.2))

    # an empty bar, in order to add tick_label
    plt.bar(x + 0.15, 0, tick_label=file_name)

    plt.bar(x, time1, width=single_width, color='b', label=alg1_name)
    plt.bar(x2, time2, width=single_width, color='g', label=alg2_name)

    # add value info to the bars
    plt.text(x[0], t1, "%.2f" % t1, ha='center', va='bottom', fontsize=10)
    plt.text(x2[0], t2, "%.2f" % t2, ha='center', va='bottom', fontsize=10)

    # x, y axis label
    plt.xlabel("Data file", fontsize=12)
    plt.ylabel("Running time(s)", fontsize=12)

    plt.title("Running time comparision")
    plt.legend()

    plt.show()


def show_clusters(cls_nums1, cls_nums2, alg1_name, alg2_name, file_name):
    """
    :param cls_nums1: [list], number of items in each cluster generated by the first algorithm
    :param cls_nums2: [list], ...by the second algorithm
    :param alg1_name: [string], name of the first algorithm
    :param alg2_name: [string], name of the second algorithm
    :param file_name: [string], name of data-file
    :return: None, to open a new gui window to show the result in a chart
    """
    plt.figure(figsize=(11.1, 4.8))
    plt.subplot(1, 2, 1)
    plt.title("Clustering info of " + alg1_name)

    if cls_nums1:
        cls = list(range(len(cls_nums1)))
        cls_label = ["cls " + str(i) for i in cls]

        plt.ylim((min(cls_nums1) * 0.8, max(cls_nums1) * 1.2))

        plt.bar(cls, cls_nums1, width=0.6, color='rgbcmyk', tick_label=cls_label)
        for a, b in zip(cls, cls_nums1):
            plt.text(a, b, "%.0f" % b, ha='center', va='bottom', fontsize=10)   # set value info

    plt.xlabel("Clusters of " + file_name, fontsize=12)
    plt.ylabel("Number of items", fontsize=12)

    # second algorithm
    plt.subplot(1, 2, 2)

    if cls_nums2:
        cls = list(range(len(cls_nums2)))
        cls_label = ["cls " + str(i) for i in cls]
        cls_label.pop()
        cls_label.append("noise")

        plt.ylim((min(cls_nums2) * 0.8, max(cls_nums2) * 1.2))

        plt.bar(cls, cls_nums2, width=0.6, color='rgbcmyk', tick_label=cls_label)
        for a, b in zip(cls, cls_nums2):
            plt.text(a, b, "%.0f" % b, ha='center', va='bottom', fontsize=10)   # set value info

    plt.xlabel("Clusters of " + file_name, fontsize=12)
    plt.title("Clustering info of " + alg2_name)

    plt.show()


def show_scatter(dat_set, cls_info1, cls_info2, alg1_name, alg2_name, file_name):
    """
    :param dat_set: [list] total data-set
    :param cls_info1: [dict] cluster result generated by the first algorithm
    :param cls_info2: [dict]... the second algorithm
    :param alg1_name: [str] name of the first algorithm
    :param alg2_name: [str] ... the second algorithm
    :param file_name: [str] name of the data file
    :return: None, to open a new gui window to show the result in a chart
    """
    plt.figure(figsize=(11.1, 4.8))

    plt.subplot(1, 2, 1)
    plt.title(alg1_name)
    plt.xlabel(file_name)
    for i in cls_info1:
        x = [item[0] for item in cls_info1[i]]
        y = [item[1] for item in cls_info1[i]]
        plt.scatter(x, y)

    plt.subplot(1, 2, 2)
    plt.title(alg2_name)
    plt.xlabel(file_name)
    for i in cls_info2:
        x = [dat_set[idx][0] for idx in cls_info2[i]]
        y = [dat_set[idx][1] for idx in cls_info2[i]]
        if i == -2:
            plt.scatter(x, y, label="noise")
        else:
            plt.scatter(x, y)

    plt.legend()
    plt.show()


# module test
# if __name__ == '__main__':
#     from core import data, dbscan, kmeans
#     path = "/home/tc/Desktop/data/Teaching_Assistant_Evaluation/tea.txt"
#     path2 = "/home/tc/Desktop/data/Contraceptive_Method_Choice/cmc.txt"
#     path3 = "../src/smile.txt"
#     file_name = path.split("/").pop()
#     d = data.Data()
#     d.txt_to_data(path3)
#     kmeans.k_means(d)
#     dbscan.dbscan(d)
#
#
#
#     info1 = {i: kmeans.K.cls_info[i]["elements"] for i in kmeans.K.cls_info}
#     info2 = {i: dbscan.D.clusters[i] for i in dbscan.D.clusters}
#     show_scatter(d.data_set, info1, info2, "k-means", "dbscan", file_name)
    # print(kmeans.G.run_time, dbscan.D.run_time)
    #
    # show_time(file_name, kmeans.K.run_time, dbscan.D.run_time, "k-means", "dbscan")

